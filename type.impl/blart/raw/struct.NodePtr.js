(function() {
    var type_impls = Object.fromEntries([["blart",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#623-627\">Source</a><a href=\"#impl-Clone-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#624-626\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#646-650\">Source</a><a href=\"#impl-Debug-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#647-649\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+N%3E-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#630-636\">Source</a><a href=\"#impl-From%3C%26mut+N%3E-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N: <a class=\"trait\" href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\">Node</a>&lt;PREFIX_LEN&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut N</a>&gt; for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#631-635\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(node_ref: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut N</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut N>","blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodePtr%3CPREFIX_LEN,+LeafNode%3CK,+V,+PREFIX_LEN%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#529-621\">Source</a><a href=\"#impl-NodePtr%3CPREFIX_LEN,+LeafNode%3CK,+V,+PREFIX_LEN%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, <a class=\"struct\" href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\">LeafNode</a>&lt;K, V, PREFIX_LEN&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_key_value_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#539-544\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_key_value_ref\" class=\"fn\">as_key_value_ref</a>&lt;'a&gt;(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the key and value of the pointed to\n<a href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\"><code>LeafNode</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the data. In particular, for the duration of this\nlifetime, the memory the pointer points to must not get mutated\n(except inside UnsafeCell).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_key_ref_value_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#555-561\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_key_ref_value_mut\" class=\"fn\">as_key_ref_value_mut</a>&lt;'a&gt;(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut V</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the key and value of the pointed\nto <a href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\"><code>LeafNode</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the node. In particular, for the duration of this\nlifetime, the node the pointer points to must not get accessed (read\nor written) through any other pointer.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_key_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#572-580\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_key_ref\" class=\"fn\">as_key_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a><div class=\"where\">where\n    V: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the key and value of the pointed\nto <a href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\"><code>LeafNode</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the data. In particular, for the duration of this\nlifetime, the memory the pointer points to must not get mutated\n(except inside UnsafeCell).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_value_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#591-600\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_value_ref\" class=\"fn\">as_value_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a><div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the key and value of the pointed\nto <a href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\"><code>LeafNode</code></a>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the data. In particular, for the duration of this\nlifetime, the memory the pointer points to must not get mutated\n(except inside UnsafeCell).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_value_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#611-620\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_value_mut\" class=\"fn\">as_value_mut</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut V</a><div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the key and value of the pointed\nto <a href=\"blart/raw/struct.LeafNode.html\" title=\"struct blart::raw::LeafNode\"><code>LeafNode</code></a>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the node. In particular, for the duration of this\nlifetime, the node the pointer points to must not get accessed (read\nor written) through any other pointer.</li>\n</ul>\n</div></details></div></details>",0,"blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#399-527\">Source</a><a href=\"#impl-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N: <a class=\"trait\" href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\">Node</a>&lt;PREFIX_LEN&gt;&gt; <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#405-409\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.new\" class=\"fn\">new</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut N</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a safe pointer to a <a href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\"><code>Node</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li>Given pointer must be non-null, aligned, and valid for reads or writes\nof a value of N type.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocate_node_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#413-426\">Source</a><h4 class=\"code-header\">pub fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.allocate_node_ptr\" class=\"fn\">allocate_node_ptr</a>(node: N, alloc: &amp;impl <a class=\"trait\" href=\"blart/allocator/trait.Allocator.html\" title=\"trait blart::allocator::Allocator\">Allocator</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Allocate the given <a href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\"><code>Node</code></a> on the <a href=\"blart/allocator/struct.Global.html\" title=\"struct blart::allocator::Global\"><code>alloc::alloc::Global</code></a> heap and\nreturn a <a href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\"><code>NodePtr</code></a> that wrap the raw pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deallocate_node_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#436-460\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.deallocate_node_ptr\" class=\"fn\">deallocate_node_ptr</a>(node: Self, alloc: &amp;impl <a class=\"trait\" href=\"blart/allocator/trait.Allocator.html\" title=\"trait blart::allocator::Allocator\">Allocator</a>) -&gt; N</h4></section></summary><div class=\"docblock\"><p>Deallocate a <a href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\"><code>Node</code></a> object created with the\n<a href=\"blart/raw/struct.NodePtr.html#method.allocate_node_ptr\" title=\"associated function blart::raw::NodePtr::allocate_node_ptr\"><code>NodePtr::allocate_node_ptr</code></a> function.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<ul>\n<li>This function can only be called once for a given node object.</li>\n<li>The given allocator must be the same one that was used in the call to\n<a href=\"blart/raw/struct.NodePtr.html#method.allocate_node_ptr\" title=\"associated function blart::raw::NodePtr::allocate_node_ptr\"><code>NodePtr::allocate_node_ptr</code></a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#470-476\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.replace\" class=\"fn\">replace</a>(dest: Self, new_value: N) -&gt; N</h4></section></summary><div class=\"docblock\"><p>Moves <code>new_value</code> into the referenced <code>dest</code>, returning the previous\n<code>dest</code> value.</p>\n<p>Neither value is dropped.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li>The node the <code>dest</code> pointers points to must not get accessed (read or\nwritten) through any other pointers concurrent to this modification.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_opaque\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#479-481\">Source</a><h4 class=\"code-header\">pub fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.to_opaque\" class=\"fn\">to_opaque</a>(self) -&gt; <a class=\"struct\" href=\"blart/raw/struct.OpaqueNodePtr.html\" title=\"struct blart::raw::OpaqueNodePtr\">OpaqueNodePtr</a>&lt;N::<a class=\"associatedtype\" href=\"blart/raw/trait.Node.html#associatedtype.Key\" title=\"type blart::raw::Node::Key\">Key</a>, N::<a class=\"associatedtype\" href=\"blart/raw/trait.Node.html#associatedtype.Value\" title=\"type blart::raw::Node::Value\">Value</a>, PREFIX_LEN&gt;</h4></section></summary><div class=\"docblock\"><p>Cast node pointer back to an opaque version, losing type information</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#485-491\">Source</a><h4 class=\"code-header\">pub fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.read\" class=\"fn\">read</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\">ManuallyDrop</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>Reads the Node from self without moving it. This leaves the memory in\nself unchanged.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#501-506\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a N</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the value.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the data. In particular, for the duration of this\nlifetime, the memory the pointer points to must not get mutated\n(except inside UnsafeCell).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#516-521\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut N</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the node.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<ul>\n<li>You must enforce Rust’s aliasing rules, since the returned lifetime\n’a is arbitrarily chosen and does not necessarily reflect the actual\nlifetime of the node. In particular, for the duration of this\nlifetime, the node the pointer points to must not get accessed (read\nor written) through any other pointer.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#524-526\">Source</a><h4 class=\"code-header\">pub fn <a href=\"blart/raw/struct.NodePtr.html#tymethod.to_ptr\" class=\"fn\">to_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut N</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying *mut pointer.</p>\n</div></details></div></details>",0,"blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#638-642\">Source</a><a href=\"#impl-PartialEq-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#639-641\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#652-656\">Source</a><a href=\"#impl-Pointer-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#653-655\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","blart::raw::iterator::LeafPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visitable%3CK,+T,+PREFIX_LEN%3E-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/visitor.rs.html#69-88\">Source</a><a href=\"#impl-Visitable%3CK,+T,+PREFIX_LEN%3E-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, T, const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N: <a class=\"trait\" href=\"blart/raw/trait.Node.html\" title=\"trait blart::raw::Node\">Node</a>&lt;PREFIX_LEN&gt; + <a class=\"trait\" href=\"blart/raw/visitor/trait.Visitable.html\" title=\"trait blart::raw::visitor::Visitable\">Visitable</a>&lt;K, T, PREFIX_LEN&gt;&gt; <a class=\"trait\" href=\"blart/raw/visitor/trait.Visitable.html\" title=\"trait blart::raw::visitor::Visitable\">Visitable</a>&lt;K, T, PREFIX_LEN&gt; for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.super_visit_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/visitor.rs.html#72-87\">Source</a><a href=\"#method.super_visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"blart/raw/visitor/trait.Visitable.html#tymethod.super_visit_with\" class=\"fn\">super_visit_with</a>&lt;V: <a class=\"trait\" href=\"blart/raw/visitor/trait.Visitor.html\" title=\"trait blart::raw::visitor::Visitor\">Visitor</a>&lt;K, T, PREFIX_LEN&gt;&gt;(\n    &amp;self,\n    visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>,\n) -&gt; V::<a class=\"associatedtype\" href=\"blart/raw/visitor/trait.Visitor.html#associatedtype.Output\" title=\"type blart::raw::visitor::Visitor::Output\">Output</a></h4></section></summary><div class='docblock'>This function provides the default traversal behavior for the\nimplementing type. <a href=\"blart/raw/visitor/trait.Visitable.html#tymethod.super_visit_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/blart/raw/visitor.rs.html#50-52\">Source</a><a href=\"#method.visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"blart/raw/visitor/trait.Visitable.html#method.visit_with\" class=\"fn\">visit_with</a>&lt;V: <a class=\"trait\" href=\"blart/raw/visitor/trait.Visitor.html\" title=\"trait blart::raw::visitor::Visitor\">Visitor</a>&lt;K, T, PREFIX_LEN&gt;&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; V::<a class=\"associatedtype\" href=\"blart/raw/visitor/trait.Visitor.html#associatedtype.Output\" title=\"type blart::raw::visitor::Visitor::Output\">Output</a></h4></section></summary><div class='docblock'>This function will traverse the implementing type and execute any\nspecific logic from the given <a href=\"blart/raw/visitor/trait.Visitor.html\" title=\"trait blart::raw::visitor::Visitor\"><code>Visitor</code></a>. <a href=\"blart/raw/visitor/trait.Visitable.html#method.visit_with\">Read more</a></div></details></div></details>","Visitable<K, T, PREFIX_LEN>","blart::raw::iterator::LeafPtr"],["<section id=\"impl-Copy-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#628\">Source</a><a href=\"#impl-Copy-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section>","Copy","blart::raw::iterator::LeafPtr"],["<section id=\"impl-Eq-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/blart/raw/representation.rs.html#644\">Source</a><a href=\"#impl-Eq-for-NodePtr%3CPREFIX_LEN,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const PREFIX_LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"blart/raw/struct.NodePtr.html\" title=\"struct blart::raw::NodePtr\">NodePtr</a>&lt;PREFIX_LEN, N&gt;</h3></section>","Eq","blart::raw::iterator::LeafPtr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[30560]}